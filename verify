#!/bin/bash

ok=true
failures=""
count=0
failure_count=0

run() {
    filename=$1
    echo "$filename:"
    basename=${filename%.*}
    suffix=${filename#*.}
    out=$filename.out
    tmpdir=__${filename}__$$
    mkdir $tmpdir || return
    cd $tmpdir
    cp -p ../$filename .
    case $suffix in
        adb)
            gnatmake $basename
            ./$basename > $out
            ;;
        b)
            sed 's/^$/#include <stdio.h>/;s/main()/int main(void)/;s/auto/auto int/;s/*n/\\n/' $filename >| $filename.c
            gcc $filename.c -o $basename
            ./$basename > $out
            ;;
        bas)
            bwbasic $filename | sed '/ \|^$/d' > $out # Need to filter out the copyright header
            ;;
        c)
            gcc -std=c99 $filename -o $basename
            ./$basename > $out
            ;;
        cob)
            cobc -x $filename
            ./$basename > $out
            ;;
        cpp)
            g++ $filename -o $basename
            ./$basename > $out
            ;;
        cr)
            crystal build $filename
            ./$basename > $out
            ;;
        cs)
            mcs $filename
            mono $basename.exe > $out
            ;;
        curl)
            ./$filename > $out 2>/dev/null
            ;;
        d)
            gdc $filename -o $basename
            ./$basename > $out
            ;;
        elisp)
            ./$filename 2>/dev/null > $out
            ;;
        f66)
            cp $filename fizzbuzz66.f
            gfortran fizzbuzz66.f -o $basename
            ./$basename > $out
            ;;
        f)
            gfortran $filename -o $basename
            ./$basename > $out
            ;;
        f90)
            gfortran $filename -o $basename
            ./$basename > $out
            ;;
        gcc)
            gcc -x c -c $filename 2>&1 | sed 's/:.*//' > $out
            ;;
        gdb)
            gdb -q -x $filename > $out
            ;;
        go)
            go build -o $basename $filename
            ./$basename > $out
            ;;
        gpt)
            gpt $filename -o $basename
            ./$basename > $out
            ;;
        gravity)
            gravity -q $filename > $out
            ;;
        groovy)
            groovyc $filename
            jar cvf $basename.jar *.class
            CLASSPATH=$basename.jar groovy $basename > $out
            ;;
        hs)
            ghc $filename
            ./$basename > $out
            ;;
        hx)
            # Haxe requires a class name to start with an uppercase letter,
            # and requires the source file name to match the class name.
            cp -p $filename Fizzbuzz.hx
            haxe -main Fizzbuzz --interp > $out
            ;;
        icn)
            icont $filename
            ./$basename > $out
            ;;
        java)
            javac $filename
            java $basename > $out
            ;;
        kt)
            kotlinc $filename -include-runtime -d $basename.jar
            java -jar $basename.jar > $out
            ;;
        logo)
            # ucblogo 6.0 depends on X11
            timeout 10 ./$filename > $out
            ;;
        pas)
            fpc $filename
            ./$basename > $out
            ;;
        pli)
             # compile and link commands derived from samples/Makefile.Linux in pli tarball
             PLI=/o/apps/pli-0.9.10c
             $PLI/bin/plic -C -dELF -lsiaxgo -ew "-cn(^) -i$PLI/lib/include" fizzbuzz.pli -o fizzbuzz.o
             ld -z muldefs -Bstatic -o fizzbuzz --oformat=elf32-i386 -melf_i386 -e main fizzbuzz.o --start-group $PLI/lib/libprf.a --end-group
             ./$basename > $out
             ;;
        ps)
            gs -q -dNODISPLAY $filename > $out
            ;;
        pure)
            ./$filename > $out
            ;;
        m)
            . /usr/share/GNUstep/Makefiles/GNUstep.sh
            cc -std=c99 `gnustep-config --objc-flags` $filename -lobjc -lgnustep-base -o $basename
            ./$basename > $out
            ;;
        m4)
            m4 $filename > $out
            ;;
        mod)
            gm2 $filename -o $basename
            ./$basename > $out
            ;;
        myr)
            mbld -b $basename $filename
            ./$basename > $out
            ;;
        nim)
            nim compile $filename
            ./$basename > $out
            ;;
        nodejs)
            ./$filename &
            sleep 1
            curl --silent http://localhost:9000 > $out
            ;;
        ratfor)
            ratfor -o $filename.f $filename
            f77 $filename.f -o $basename
            ./$basename > $out
            ;;
        rs)
            rustc $filename
            ./$basename > $out
            ;;
        scala)
            scalac $filename
            jar cfe $basename.jar $basename *.class
            scala $basename.jar > $out
            ;;
        sd7)
            s7c $filename
            ./$basename > $out
            ;;
        sed)
            echo '' | ./$filename > $out
            ;;
        sim)
            cim -e $filename
            ./$basename > $out
            ;;
        sqlite3)
            sqlite3 -init $filename < /dev/null > $out
            ;;
        sx)
            gcc $filename -o $basename
            ./$basename > $out
            ;;
        tab)
            tab -f <(grep -v '^#' $filename) > $out
            ;;
        tail)
            _POSIX2_VERSION=199209 ./$filename > $out
            ;;
        v)
            v $filename
            ./$basename > $out
            ;;
        vala)
            valac $filename -o $basename
            ./$basename > $out
            ;;
        vb)
            vbnc $filename
            mono $basename.exe > $out
            ;;
        vim)
            vim --cmd "source $filename"
            ;;
        ws)
            whitespace $filename > $out
            ;;
        xpl)
            xpldir=/o/apps/xpl-0.6
            $xpldir/bin/xpl $filename
            gcc -I$xpldir/include fizzbuzz.c -L$xpldir/lib -lxpl -o fizzbuzz
            ./fizzbuzz >$out
            ;;
        zig)
            zig run $filename >$out
            ;;
        *)
            ./$filename > $out
            ;;
    esac
    if ! cmp -s $out ../expected-output.txt ; then
        ok=false
        failures="$failures $filename"
        (( failure_count++ ))
    fi
    cd ..
    rm -rf $tmpdir
    (( count++ ))
}

if [ $# -eq 1 ] && [ "$1" = "-git" ] ; then
    for file in $(git ls-files 'fizzbuzz.*') ; do
        run $file
    done
elif [ $# -gt 0 ] ; then
    for file in "$@" ; do
        run $file
    done
else
    for file in fizzbuzz.* ; do
        run $file
    done
fi

s=''
if [ $count -ne 1 ] ; then
    s=s
fi
echo Tested $count language$s
if $ok ; then
    echo OK
else
    s=s
    if [ $failure_count -eq 1 ] ; then s='' ; fi
    echo "$failure_count failure$s: $failures"
fi
